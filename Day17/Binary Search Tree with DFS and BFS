package com.vc;

class Node1{
	int val;
	Node1 left;
	Node1 right;
	public Node1(int val) {
		this.val=val;
		this.left=null;
		this.right=null;
	}
}
class BSTree{
	Node1 root;
	public BSTree() {
		this.root=null;
	}
	public void insertNode(Node1 node,int val) {
		Node1 n=new Node1(val);
		if(this.root==null) {
			this.root=n;
			return;
		}
		if(val<node.val) {
			if(node.left==null) {
				node.left=n;
			}
			else {
				insertNode(node.left,val);
			}
		}
		else {
			if(node.right==null) {
				node.right=n;
			}
			else {
				insertNode(node.right,val);
			}
		}
	}
	
	//DFS (Preorder traversal)
	public void preorder(Node1 node) {
		if(node!=null) {
			System.out.print(node.val+"->");
			preorder(node.left);
			preorder(node.right);
		}
	}
	//BFS (Postorder traversal)
		public void postorder(Node1 node) {
			if(node!=null) {
				preorder(node.left);
				preorder(node.right);
				System.out.print(node.val+"->");
			}
		}
}
public class day17binarySearchTree {

	public static void main(String[] args) {
		BSTree b=new BSTree();
		b.insertNode(null, 10);
		b.insertNode(b.root, 20);
		b.insertNode(b.root, 50);
		b.insertNode(b.root, 7);
		b.insertNode(b.root, 25);
		b.insertNode(b.root, 80);
		b.insertNode(b.root, 5);
		b.insertNode(b.root, 2);
		b.insertNode(b.root, 6);
		System.out.println("preorder/depth first search ");
		b.preorder(b.root);
		System.out.println("\npostorder/breadth first search ");
		b.postorder(b.root);

	}

}
